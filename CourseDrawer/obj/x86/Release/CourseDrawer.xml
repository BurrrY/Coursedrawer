<?xml version="1.0"?>
<doc>
<assembly>
<name>
CourseDrawer
</name>
</assembly>
<members>
<member name="T:CourseDrawer.My.Resources.Resources">
<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.ResourceManager">
<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.Culture">
<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources._04_maps">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Icon ähnlich wie (Symbol).
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butAddNode">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butDelCrs">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butDeleteNode">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butFillNodes">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butInsertNode">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butMap">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butMove">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butNewCrs">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butOpen">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butRecalcDir">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butSave">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butSelect">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.butZoom">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:CourseDrawer.My.Resources.Resources.magnify">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Byte[].
</summary>
</member>
<member name="M:CourseDrawer.clsCourseManager.getInstance(System.String,System.Boolean)">
 <summary>
 Get instance of singleton class
 </summary>
 <param name="forceNew">force create new instance</param>
 <returns>Instance of courses collection</returns>
 <remarks></remarks>
</member>
<member name="T:CourseDrawer.clsSettings">
 <summary>
 Class for collection of folders
 </summary>
 <remarks>Singleton class for wrapping folders</remarks>
</member>
<member name="M:CourseDrawer.clsSettings.getInstance(System.Boolean)">
 <summary>
 Get instance of singleton class
 </summary>
 <param name="forceNew">force create new instance</param>
 <returns>Instance of courses collection</returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsSettings.ReadXML(System.String)">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsSettings.SaveXML(System.Xml.Linq.XElement@)">
 <summary>
 Save folders to XML file
 </summary>
 <param name="root">byref xelement node</param>
 <remarks></remarks>
</member>
<member name="T:CourseDrawer.clsCourses">
 <summary>
 Class for collection of courses
 </summary>
 <remarks>Singleton class for wrapping courses</remarks>
</member>
<member name="M:CourseDrawer.clsCourses.#ctor">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.getInstance(System.Boolean)">
 <summary>
 Get instance of singleton class
 </summary>
 <param name="forceNew">force create new instance</param>
 <returns>Instance of courses collection</returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.getInstance(System.Collections.Generic.List{CourseDrawer.clsCourse},System.Boolean)">
 <summary>
 Get instance of singleton class
 </summary>
 <param name="forceNew">force create new instance</param>
 <returns>Instance of courses collection</returns>
 <remarks></remarks>
</member>
<member name="P:CourseDrawer.clsCourses.CourseList">
 <summary>
 Get list of course name and hidden attribute
 </summary>
 <value></value>
 <returns>Dictionary of course names and hidden attribute</returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.ItemHide(System.Int32,System.Boolean)">
 <summary>
 Set course hidden or visible
 </summary>
 <param name="id">id</param>
 <param name="hide">true = hidden, false = visible</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.ReadCourseXML(CourseDrawer.clsCourse)">
 <summary>
 Read Single Course File
 </summary>
 <param name="Course"></param>
</member>
<member name="M:CourseDrawer.clsCourses.ReadXML(System.String)">
 <summary>
 Read courses from XML file
 </summary>
 <param name="file">filename incl. full path</param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.draw(System.Drawing.Graphics@,System.Int32)">
 <summary>
 Draw courses
 </summary>
 <param name="graphics"></param>
 <param name="zoomLvl"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.selectWP(System.Drawing.PointF,System.Boolean)">
 <summary>
 Select course at point
 </summary>
 <param name="point"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.selectWP(System.Int32)">
 <summary>
 Select course by ID
 </summary>
 <param name="id"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.SortCourses(CourseDrawer.clsCourse,CourseDrawer.clsCourse)">
 <summary>
 Sort courses by ID
 </summary>
 <param name="X"></param>
 <param name="Y"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.selectedChangeHandler(CourseDrawer.clsWaypoint@)">
 <summary>
 Set selected waypoint
 </summary>
 <param name="wp"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.deleteSelectedWP">
 <summary>
 Delete selected waypoint
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.deleteSelectedCrs">
 <summary>
 Delete selected course
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.moveCourseUp(System.Int32)">
 <summary>
 Move course UP in list
 </summary>
 <param name="id"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.moveCourseDown(System.Int32)">
 <summary>
 Move course DOWN in list
 </summary>
 <param name="id"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.RecalcCoursesID">
 <summary>
 Recalculate IDs of courses in list based on their position in list
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.insertBeforeWP">
 <summary>
 Insert waypoint before selected WP in selected course
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.appendWP">
 <summary>
 Append waypoint to selected course
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.Finalize">
 <summary>
 Destructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.SaveXML(System.Xml.Linq.XElement@)">
 <summary>
 Save courses to XML file
 </summary>
 <param name="root">byref xelement node</param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.addCourse(System.Drawing.PointF)">
 <summary>
 Create new course
 </summary>
 <param name="point">Starting point</param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.calculateAngleSelWP">
 <summary>
 Calculate angles(directions) for selected waypoint
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.calculateAngleAllWP">
 <summary>
 Calculate angles(directions) for all waypoints in selected course
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourses.fillBeforeSelected(System.Int32)">
 <summary>
 Fill waypoints between selected and previous WP in course
 </summary>
 <param name="range"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.#ctor">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.#ctor(System.String,System.Int32)">
 <summary>
 Constructor
 </summary>
 <param name="Name">Course name</param>
 <param name="id">Course ID</param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.ReadCourseXML">
 <summary>
 Read Single Course File
 </summary>
</member>
<member name="M:CourseDrawer.clsCourse.addWaypoint(CourseDrawer.clsWaypoint)">
 <summary>
 Append waypoint to course
 </summary>
 <param name="waypoint"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.insertWaypoint(CourseDrawer.clsWaypoint,System.Int32)">
 <summary>
 Insert waypoint before
 </summary>
 <param name="waypoint"></param>
 <param name="before"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.fillBeforeSelected(System.Int32)">
 <summary>
 Fill waypoints between selected and previous waypoint
 </summary>
 <param name="range"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.draw(System.Drawing.Graphics@,System.Int32)">
 <summary>
 Draw waypoints
 </summary>
 <param name="graphic"></param>
 <param name="zoomLvl"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.selectWP(System.Drawing.PointF,System.Boolean)">
 <summary>
 Select waypoint at point
 </summary>
 <param name="point"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.selectWP(System.Int32,System.Boolean)">
 <summary>
 Select waypoint by ID
 </summary>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.selectionChangedHandler(CourseDrawer.clsWaypoint@)">
 <summary>
 Set selected waypoint if selection changed
 </summary>
 <param name="wp"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.selectedCourseChanged(CourseDrawer.clsCourse@)">
 <summary>
 Set isSelected attribute if selection changed
 </summary>
 <param name="crs"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.deleteSelectedWP">
 <summary>
 Delete selected waypoint
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.insertBeforeWP">
 <summary>
 Insert waypoint before
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.appendWP">
 <summary>
 Append waypoint
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.Finalize">
 <summary>
 Destructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.getXML(System.Boolean)">
 <summary>
 Create XML of course
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.initWPforNewCourse(System.Drawing.PointF)">
 <summary>
 Initial waypoints for new course
 </summary>
 <param name="Point"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.forceUnselect">
 <summary>
 Force unselect course
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.calculateAngleAllWP">
 <summary>
 Calculate angle(direction) for all waypoints
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.calculateAngle(System.Int32)">
 <summary>
 Calculate angle(direction) for waypoint with ID
 </summary>
 <param name="idx"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.calculateAngleSelWP">
 <summary>
 Calculate angle(direction) for selected waypoint
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.getDirection(System.Drawing.PointF,System.Drawing.PointF)">
 <summary>
 Get direction between two points
 </summary>
 <param name="pt1"></param>
 <param name="pt2"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsCourse.DrawingArea(System.Int32)">
 <summary>
 Rechteck für den Kurs berechnen
 Dieses kann zum bestimmen des Bereiches genutzt werden, der neu gezeichnet werden muss
 </summary>
 <returns>Rechteck als Rectangle</returns>
</member>
<member name="T:CourseDrawer.clsFolders">
 <summary>
 Class for collection of folders
 </summary>
 <remarks>Singleton class for wrapping folders</remarks>
</member>
<member name="M:CourseDrawer.clsFolders.ReadXML(System.String)">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsFolders.getInstance(System.Boolean)">
 <summary>
 Get instance of singleton class
 </summary>
 <param name="forceNew">force create new instance</param>
 <returns>Instance of courses collection</returns>
 <remarks></remarks>
</member>
<member name="P:CourseDrawer.clsFolders.FolderList">
 <summary>
 Get list of course name and hidden attribute
 </summary>
 <value></value>
 <returns>Dictionary of course names and hidden attribute</returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsFolders.SaveXML(System.Xml.Linq.XElement@)">
 <summary>
 Save folders to XML file
 </summary>
 <param name="root">byref xelement node</param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.#ctor">
 <summary>
 Constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.selectWP(System.Drawing.PointF,System.Double)">
 <summary>
 Find if this waypoint is selected (in range of point)
 </summary>
 <param name="point"></param>
 <param name="range"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.setNewPos(System.Drawing.PointF)">
 <summary>
 Set new position
 </summary>
 <param name="point"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.SelectionChangedHandler(CourseDrawer.clsWaypoint@)">
 <summary>
 Set selected attribute
 </summary>
 <param name="wp"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.getXML(System.Int32)">
 <summary>
 Create XML from waypoint
 </summary>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.Finalize">
 <summary>
 Destructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.Clone(System.Single,System.Single)">
 <summary>
 Clone waypoint (create copy)
 </summary>
 <param name="dX">offset X</param>
 <param name="dY">offset Y</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.forceSelect">
 <summary>
 Force select this waypoint
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.clsWaypoint.forceUnselect">
 <summary>
 Force unselect
 </summary>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.crsListItem.selectItem(System.Boolean)">
 <summary>
 Eintrag selektieren
 </summary>
 <param name="Selection">True: Auswählen, False: Abwählen</param>
</member>
<member name="P:CourseDrawer.crsListItems.SelectedCrsListItem">
 <summary>
 Ausgewähltes Element zurück geben
 </summary>
 <returns>Auswahl als crsListItem</returns>
</member>
<member name="P:CourseDrawer.crsListItems.crsCount">
 <summary>
 Anzahl der Elemente von Coursen in der Liste
 </summary>
 <returns>Anzahl als Integer</returns>
</member>
<member name="M:CourseDrawer.crsListItems.createCourse(System.String,System.Object,System.Boolean)">
 <summary>
 Neuen Kurs in die Liste aufnehmen und anzeigen
 </summary>
 <param name="CourseName"></param>
 <param name="CourseVisible"></param>
</member>
<member name="M:CourseDrawer.crsListItems.SelectCourseListItem(CourseDrawer.crsListItem,System.EventArgs)">
 <summary>
 Eine Kurs auswählen
 </summary>
 <param name="Course"></param>
 <param name="e"></param>
</member>
<member name="M:CourseDrawer.crsListItems.SelectionAll(System.Boolean)">
 <summary>
 Alle Einträge den Haken (zurück)setzen
 </summary>
 <param name="Visible"></param>
</member>
<member name="M:CourseDrawer.mainForm.butLoad_Click(System.Object,System.EventArgs)">
 <summary>
 Loads bitmap as background
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.mainForm.PictureBox1_Click(System.Object,System.EventArgs)">
 <summary>
 Do things                                                                             
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.main.getWorlCoordinates(System.Int64,System.Int64,System.Int32)">
 <summary>
 Get true world coordinates (abstracting from zoom)
 </summary>
 <param name="X"></param>
 <param name="Y"></param>
 <param name="zoomLevel"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.main.getWorlCoordinates(System.Drawing.Point,System.Int32)">
 <summary>
 Get true world coordinates (abstracting from zoom)
 </summary>
 <param name="point"></param>
 <param name="zoomLevel"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.main.getWorlCoordinates(System.Drawing.PointF,System.Int32)">
 <summary>
 Get true world coordinates (abstracting from zoom)
 </summary>
 <param name="point"></param>
 <param name="zoomLevel"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.main.getDrawCoordinates(System.Int64,System.Int64,System.Int32)">
 <summary>
 Get draw coordinates from world coordinates (zoom)
 </summary>
 <param name="X"></param>
 <param name="Y"></param>
 <param name="zoomLevel"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.main.getDrawCoordinates(System.Drawing.Point,System.Int32)">
 <summary>
 Get draw coordinates from world coordinates (zoom)
 </summary>
 <param name="point"></param>
 <param name="zoomLevel"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CourseDrawer.main.getDrawCoordinates(System.Drawing.PointF,System.Int32)">
 <summary>
 Get draw coordinates from world coordinates (zoom)
 </summary>
 <param name="point"></param>
 <param name="zoomLevel"></param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
